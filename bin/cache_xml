#!/usr/bin/env ruby

require 'cache_xml'
require 'thinp_xml/distribution'
require 'ejt_command_line'

#----------------------------------------------------------------

CacheCommandLine = CommandLine::Parser.new do
  value_type :string do |str|
    str
  end

  value_type :int do |str|
    Integer(str)
  end

  value_type :distribution do |str|
    parse_distribution(str)
  end

  simple_switch :help, '--help', '-h'
  value_switch :uuid, :string, '--uuid'
  value_switch :block_size, :distribution, '--block-size'
  value_switch :nr_cache_blocks, :distribution, '--nr-cache-blocks'

  global do
    switches :help
  end

  command :create do
    switches :uuid, :block_size, :nr_cache_blocks
  end
end

#--------------------------------

class Dispatcher
  def global_command(opts, args)
    if args.size > 0
      die "unknown command '#{args[0]}'"
    else
      if opts[:help]
        help(STDOUT)
      else
        die "no command given"
      end
    end
  end

  def create(opts, args)
    b = ThinpXML::Cache::Builder.new
    b.uuid = opts.fetch(:uuid, '')
    b.nr_cache_blocks = opts.fetch(:nr_mappings, 0)
    b.block_size = opts.fetch(:block_size, 128)
    md = b.generate
    write_xml(md, STDOUT)
  end

  private
  def die(msg)
    STDERR.puts msg
    exit(1)
  end

  def help(out)
    out.write <<EOF
Manipulation of cache xml format metadata
  --help, -h:	Show this message
EOF
  end
end

def parse_command_line(dispatcher, *args)
  CacheCommandLine.parse(dispatcher, *args)
end

def top_level_handler(&block)
  begin
    block.call
  rescue => e
    STDERR.puts e.message
    exit 1
  end

  exit 0
end

#----------------------------------------------------------------

top_level_handler do
  dispatcher = Dispatcher.new
  parse_command_line(dispatcher, *ARGV)
end

#----------------------------------------------------------------
